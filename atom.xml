<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Stone&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-05-10T16:29:00.389Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Purple M. Stone</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Pytorch计算模型运算量的工具--torchstat</title>
    <link href="http://yoursite.com/2020/05/11/pytorch_torchstat/"/>
    <id>http://yoursite.com/2020/05/11/pytorch_torchstat/</id>
    <published>2020-05-10T16:48:09.000Z</published>
    <updated>2020-05-10T16:29:00.389Z</updated>
    
    <content type="html"><![CDATA[<h1 id="说明与安装"><a href="#说明与安装" class="headerlink" title="说明与安装"></a>说明与安装</h1><p>这个包可以计算出一个网络模型的参数量和运算量，甚至给出每一层的运算量，比如：</p><p><img src="/images/torchstat/example.png" alt="example"></p><p>安装方法为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install torchstat</span><br></pre></td></tr></table></figure><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">from</span> torchstat <span class="keyword">import</span> stat</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Net</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(Net, self).__init__()</span><br><span class="line">        self.conv1 = nn.Conv2d(<span class="number">3</span>, <span class="number">10</span>, kernel_size=<span class="number">5</span>)</span><br><span class="line">        self.conv2 = nn.Conv2d(<span class="number">10</span>, <span class="number">20</span>, kernel_size=<span class="number">5</span>)</span><br><span class="line">        self.conv2_drop = nn.Dropout2d()</span><br><span class="line">        self.fc1 = nn.Linear(<span class="number">56180</span>, <span class="number">50</span>)</span><br><span class="line">        self.fc2 = nn.Linear(<span class="number">50</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        x = F.relu(F.max_pool2d(self.conv1(x), <span class="number">2</span>))</span><br><span class="line">        x = F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), <span class="number">2</span>))</span><br><span class="line">        x = x.view(<span class="number">-1</span>, <span class="number">56180</span>)</span><br><span class="line">        x = F.relu(self.fc1(x))</span><br><span class="line">        x = F.dropout(x, training=self.training)</span><br><span class="line">        x = self.fc2(x)</span><br><span class="line">        <span class="keyword">return</span> F.log_softmax(x, dim=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    model = Net()</span><br><span class="line">    stat(model, (<span class="number">3</span>, <span class="number">224</span>, <span class="number">224</span>))</span><br></pre></td></tr></table></figure><p>然后在命令行输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torchstat -f example.py -m Net</span><br></pre></td></tr></table></figure><p>如果要更改输入图像的尺寸，只改example.py里的（3，224，224）没有起作用，于是我使用了-s选项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torchstat -f example.py -m Net -s &#39;3x32x32&#39;</span><br></pre></td></tr></table></figure><p>这里选项内容是用字符串表示的，‘x’就是字母x。</p><h1 id="另一个示例"><a href="#另一个示例" class="headerlink" title="另一个示例"></a>另一个示例</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torchstat <span class="keyword">import</span> stat</span><br><span class="line"><span class="keyword">import</span> torchvision.models <span class="keyword">as</span> models</span><br><span class="line"></span><br><span class="line">model = models.resnet18()</span><br><span class="line">stat(model, (<span class="number">3</span>, <span class="number">224</span>, <span class="number">224</span>))</span><br></pre></td></tr></table></figure><p><a href="https://github.com/Swall0w/torchstat" target="_blank" rel="noopener">torchstat的Github</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;说明与安装&quot;&gt;&lt;a href=&quot;#说明与安装&quot; class=&quot;headerlink&quot; title=&quot;说明与安装&quot;&gt;&lt;/a&gt;说明与安装&lt;/h1&gt;&lt;p&gt;这个包可以计算出一个网络模型的参数量和运算量，甚至给出每一层的运算量，比如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/i
      
    
    </summary>
    
    
      <category term="PyTorch Tools" scheme="http://yoursite.com/categories/PyTorch-Tools/"/>
    
    
      <category term="pytorch" scheme="http://yoursite.com/tags/pytorch/"/>
    
  </entry>
  
  <entry>
    <title>NAS：GDAS论文解读</title>
    <link href="http://yoursite.com/2020/04/26/NAS_GDAS/"/>
    <id>http://yoursite.com/2020/04/26/NAS_GDAS/</id>
    <published>2020-04-26T13:48:09.000Z</published>
    <updated>2020-05-10T16:31:30.340Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><p>GDAS在DARTS的基础上进行了改进。（1）DARTS是优化所有运算的权重，这样就会浪费很多时间，增加了训练时长。而GDAS只训练采样的运算，相较于完全训练时间更短。（2）将不同的运算同时优化可能会使得它们之间产生对抗，不同的运算可能产生相反的值，求和之后可能就会产生特征消失，导致两个相连节点之间信息流的破坏，从而破坏了优化过程。而GDAS每次只优化DAG的一部分，更加有效。</p><h1 id="可微分模型采样"><a href="#可微分模型采样" class="headerlink" title="可微分模型采样"></a>可微分模型采样</h1><p>GDAS的主要创新点是使用了可微分模型采样进行搜索。在结点<em>i</em>和结点<em>j</em>之间，GDAS算法是从候选函数（操作）集合<strong>F</strong>中按照离散概率分布<img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image002.png" alt="img">采样出一个函数（操作）。在搜索过程中，cell中的每个结点计算方式如下：</p><p><img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image004.png" alt="img"></p><p>其中<img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image006.png" alt="img">是从<img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image002.png" alt="img">中采样出来的，而<img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image008.png" alt="img">是函数内部的权重。这个离散的概率分布<img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image002.png" alt="img">可以用一个可学习的概率质量函数描述：</p><p><img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image010.png" alt="img"></p><p>其中<img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image012.png" alt="img">是一个K维可学习向量<img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image014.png" alt="img">的第<em>k</em>个元素。<img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image016.png" alt="img">表示<strong>F</strong>中的第<em>k</em>个函数（操作）。K是<strong>F</strong>的基数，即K=|<strong>F</strong>|。事实上，<img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image012.png" alt="img">是<img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image018.png" alt="img">和<img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image020.png" alt="img">之间函数（操作）采样分布的编码。因此，一个神经cell的采样分布可以由所有<img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image022.png" alt="img">进行编码，即：<img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image024.png" alt="img">。</p><p><img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image026.jpg" alt="img"></p><p><img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image028.jpg" alt="img"></p><p>存在的困难：公式(3)需要从一个离散概率分布中采样，因此不能通过公式（4）中的<img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image022.png" alt="img">来反传梯度从而优化<img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image022.png" alt="img">。为了能够反传，文中使用了Gumbel-Max技巧来重新定义公式(3)变为公式(5)的形式。</p><p><img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image030.png" alt="img"></p><p><img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image032.png" alt="img"></p><p>其中<img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image034.png" alt="img">是独立同分布的样本，服从Gumbel (0,1)分布。而<img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image036.png" alt="img">是<img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image038.png" alt="img">的第<em>k</em>个样本。<img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image040.png" alt="img">是<img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image018.png" alt="img">和<img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image020.png" alt="img">之间的转换函数<img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image042.png" alt="img">的内部权重。然后，GDAS使用softmax函数来松弛argmax函数使得公式(5)可微分：</p><p><img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image044.png" alt="img"></p><p>其中<img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image046.png" alt="img">是softmax温度。当<img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image048.png" alt="img">时，<img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image050.png" alt="img">；当<img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image052.png" alt="img"> 时，<img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image054.png" alt="img">中的每个元素都是一样的，并且近似的分布会很平滑。文中在前传过程中使用公式(5)，使用argmax；而为了梯度可以反传，在反向传播的公式(7)中使用了softmax。</p><p>训练：迭代更新采样分布<img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image056.png" alt="img">和所有函数(操作)的权重<img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image058.png" alt="img">。给定一个数据样本<em>x</em>及其对应的标签<em>y</em>，loss可以由下式计算：</p><p><img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image060.png" alt="img"></p><p><img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image062.png" alt="img"></p><p>其中<img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image056.png" alt="img">是由<strong>A</strong>编码的分布；<img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image064.png" alt="img">表示网络中所有cell中所有函数(操作)内的权重参数。对于一个数据样本，首先从<img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image056.png" alt="img">中采样出一个网络结构<img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image066.png" alt="img">，然后基于其对应的权重<img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image068.png" alt="img">计算出网络的输出。根据替代优化策略（AOS）基于交叉检验集的loss值来更新<strong>A</strong>，并基于训练集的loss来更新<strong>W</strong>。</p><p><img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image070.jpg" alt="img"></p><p>网络架构：训练完成后，需要根据学习出来的<strong>A</strong>导出最终的结构。每个节点都和其前面的T个节点连接着。遵从DARTS的设置，在CNN中使用T=2。假定<img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image072.png" alt="img">是候选的下标集合，导出最终网络结构的步骤如下：</p><p>(1)   定义<img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image018.png" alt="img">和<img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image020.png" alt="img">之间连接的重要性为：<img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image074.png" alt="img">;</p><p>(2)   对于每个节点<img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image018.png" alt="img">，保留其与之前结点的连接中T个重要性最高的连接。</p><p>(3)   对于<img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image018.png" alt="img">和<img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image020.png" alt="img">之间保留的连接，使用函数<img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image076.png" alt="img">。<img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image072.png" alt="img">的默认值为{1,…,K}。</p><p>加速：在公式(5)中，<img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image078.png" alt="img">是一个one-hot向量。因此，在前传的时候，只需要函数（操作）<img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image080.png" alt="img">。在反传过程中，只是反传在<img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image082.png" alt="img">产生的梯度。这种方式可以让我们节省大量的计算时间，并且将GPU内存使用减少了大概|F|倍。</p><p><img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image084.jpg" alt="img"></p><h1 id="实验结果与讨论"><a href="#实验结果与讨论" class="headerlink" title="实验结果与讨论"></a>实验结果与讨论</h1><p><img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image086.jpg" alt="img"></p><p><img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image088.jpg" alt="img"></p><p><img src="file:///C:/Users/shi/AppData/Local/Temp/msohtmlclip1/01/clip_image090.jpg" alt="img"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;引入&quot;&gt;&lt;a href=&quot;#引入&quot; class=&quot;headerlink&quot; title=&quot;引入&quot;&gt;&lt;/a&gt;引入&lt;/h1&gt;&lt;p&gt;GDAS在DARTS的基础上进行了改进。（1）DARTS是优化所有运算的权重，这样就会浪费很多时间，增加了训练时长。而GDAS只训练采样的运
      
    
    </summary>
    
    
      <category term="Deep Learning" scheme="http://yoursite.com/categories/Deep-Learning/"/>
    
    
      <category term="deep learning" scheme="http://yoursite.com/tags/deep-learning/"/>
    
  </entry>
  
  <entry>
    <title>NAS：DARTS论文解读</title>
    <link href="http://yoursite.com/2020/04/26/NAS_DARTS/"/>
    <id>http://yoursite.com/2020/04/26/NAS_DARTS/</id>
    <published>2020-04-26T10:48:09.000Z</published>
    <updated>2020-05-10T16:31:52.610Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Search-Space"><a href="#Search-Space" class="headerlink" title="Search Space"></a>Search Space</h1><p>搜索cell作为网络结构的构件。cell是包含N个结点的有序序列的有向无环图。结点$x^{(i)}$是隐藏表达（比如卷积网络的特征图），而有向边$(i ,j)$则关联着变换$x^{(i)}$的一些操作$o^{(i,j)}$。文章中假定一个cell中有两个输入节点和一个输出节点。对于卷积cell，输入节点被定义为当前层的前面两层的cell的输出。当前cell的输出是对所有中间节点使用一个压缩操作（比如拼接）得到的。</p><p>每一个中间结点基于其所有前向操作计算得到：</p><script type="math/tex; mode=display">x^{(j)}=\sum_{i<j}o^{(i,j)}(x^{(i)})</script><p>搜索空间中还包含了一个特殊的零操作，表示两个节点之间没有连接。学习cell的任务缩减为学习出cell的各条边的操作类型及参数。</p><h1 id="连续优化"><a href="#连续优化" class="headerlink" title="连续优化"></a>连续优化</h1><p>O是候选操作（如卷积、最大池化、零操作等）的集合，每个操作表示将一些函数$o(\cdot)$施加到$x^{(i)}$上。为了让搜索空间连续，我们把一个特定操作的范畴选择松弛为所有可能的操作上的一个softmax:</p><script type="math/tex; mode=display">\overline{o}^{(i,j)}(x)=\sum_{o\in O}\frac{exp⁡(\alpha_{o}^{(i,j)})}{\sum_{o'\in O}exp⁡(\alpha_{o'}^{(i,j)})}o(x)</script><p>对应于节点对$(i, j)$的操作混合权重被参数化为一个维度为|O|（候选操作总个数）的向量$\alpha^{i,j}$。架构搜索的任务就减少为学习一个连续变量集合$\alpha={\alpha^{(i,j)}}$。在搜索的最后，将每个混合操作$\overline{o}^{(i,j)}$用最大似然的操作代替，就可以得到离散化的网络架构。比如$o^(i,j)=argmax_{o\in O}\alpha_{o}^{(i,j)}$在下文中，用$\alpha$表示编码后的架构。</p><p><img src="/images/DARTS/darts.png" alt="darts"></p><p>DARTS的cell搜索过程概览如上图所示。该过程总结如下。最开始时cell的各条边的操作类型未知，但是可选的操作类型是预先定义的，候选操作集合中包含以下8种操作：（1）恒等连接；（2）零操作；（3）3×3 深度可分离卷积；(4) 3×3 空洞深度可分离卷积；（5）5×5深度可分离卷积；（6）5×5 空洞深度可分离卷积；（7）3×3平均池化；（8）3×3 最大池化。对于用DAG表示的cell的每条边施加一个候选操作的混合操作（混合操作是上述8种类型操作的混合，输入用8种操作进行处理，对得到的8个输出施以权重$\alpha^{(i.j)}_{o}$，然后松弛化为softmax），从而将分立的搜索空间用softmax函数松弛为连续空间，使得搜索可微分。然后通过求解一个置信优化问题对混合概率和网络权重进行联合优化，最后，将每个混合操作$\overline{o}^{(i,j)}$用最大似然的操作（也就是$i,j$结点的8条边中有着最大权重$\alpha^{(i.j)}_{o}$的那条边所对应的操作）代替，就可以得到离散化的网络架构。也就是说，训练的时候对于每两个结点之间，是8种操作都用到了，用softmax耦合为混合操作。训练完后，只保留了权重最大的那个操作。</p><p>现在目标就是将架构$\alpha$和所有混合操作中的权重$w$一起学习出来。DARTS使用梯度下降算法优化交叉检验集损失。使用$L_{train}$和$L_{val}$分别表示训练集loss和交叉检验集的loss，则优化目标是：</p><script type="math/tex; mode=display">\min\limits_{\alpha}L_{val}(w^{*}(\alpha),\alpha)</script><script type="math/tex; mode=display">s.t. w^{*}(\alpha)=argmin_{w}L_{train}(w,\alpha)</script><p>即找到最优结构$\alpha^{*}$使得在验证集上得到最优结果，即最小化$L_{val}(w^{*},\alpha^{*})$，并找到最优参数$w^{*}$，能够在特定结构$\alpha^{*}$上得到最优性能，即最小化$L_{train}(w,\alpha^{*})$。</p><h1 id="网络架构梯度近似"><a href="#网络架构梯度近似" class="headerlink" title="网络架构梯度近似"></a>网络架构梯度近似</h1><p>由于昂贵的内层优化代价，精确地求出网络架构的梯度是几乎不可能的。因此，这篇文章提出了一个简单的近似方案：</p><script type="math/tex; mode=display">\bigtriangledown_{\alpha}L_{val}(w^{*}(\alpha),\alpha)\approx\bigtriangledown_{\alpha}L_{val}(w-\xi\bigtriangledown_{w}L_{train}(w,\alpha),\alpha)</script><p>其中$w$是由近似算法得到的当前的权重，$\xi$是一步内层优化的学习率。这个算法的思路是使用一步训练调整得到的$w$来近似$w^{*}(\alpha)$，而不用训练解决内层优化问题直至收敛。如果w已经是内部优化的局部最优值，此时$\bigtriangledown_{w}L_{train}(w,\alpha)=0$，因此等号右边的式子会退化为$\bigtriangledown_{\alpha}L_{val}(w(\alpha),\alpha)$。</p><p>算法：<img src="/images/DARTS/algorithm.png" alt="algorithm"></p><p>对近似的架构梯度应用链式法则可以得到：</p><script type="math/tex; mode=display">\bigtriangledown_{\alpha}L_{val}(w',\alpha)-\xi\bigtriangledown^{2}_{\alpha,w}L_{train}(w,\alpha)\bigtriangledown_{w'}L_{val}(w',\alpha)</script><p>其中$w’=w-\xi\bigtriangledown_{w}L_{train}(w,\alpha)$表示一个一步前向网络的权重值。上式的第二项中包含了一个昂贵的矩阵-向量乘法，但是使用有限差分近似可以显著降低计算复杂度。使用一个很小的数值$\epsilon$，并令$w^{\pm}=w\pm\epsilon\bigtriangledown_{w’}L_{val}(w’,\alpha)$，则：</p><script type="math/tex; mode=display">\bigtriangledown^{2}_{\alpha,w}L_{train}(w,\alpha)\bigtriangledown_{w'}L_{val}(w',\alpha)\approx\frac{\bigtriangledown_{\alpha}L_{train}(w^{+},\alpha)-\bigtriangledown_{\alpha}L_{train}(w^{+},\alpha)}{2\epsilon}</script><p>计算这个有限差分式只需要权重值的两个前传项和$\alpha$的两个反传项，计算复杂度从$O(|\alpha||w|)$降到$O(|\alpha|+|w|)$。</p><p>一阶近似：</p><p>当$\xi = 0$时，式(7)中的二阶导数项会消失。此时，架构梯度由$\bigtriangledown_{\alpha}L_{val}(w,\alpha)$给出，对应着假定当前的$w$与$w^{*}(\alpha)$相同然后优化交叉检验loss的情况。这会带来一些加速，但是根据实验结果显示，性能会变差。下文用一阶近似来指代$\xi = 0$的情形，用二阶近似来指代$\xi &gt; 0$时的梯度公式。</p><h1 id="离散架构推导"><a href="#离散架构推导" class="headerlink" title="离散架构推导"></a>离散架构推导</h1><p>为了组成离散架构中的每一个节点，文中在该节点所有的前面节点的所有的非零候选操作中保留了top-k的最强操作。一个操作的强度被定义为</p><script type="math/tex; mode=display">\frac{exp(\alpha^{(i,j)}_o)}{\sum\limits_{o'\in O}exp(\alpha^{(i,j)}_{o'})}</script><p>其实就是两个节点之间所有候选操作都施加上去，给每个候选操作都赋予权值。权值用softmax激活之后相加起来作为节点的输出，反传学习可以更新结构权值$\alpha$。最后保留权重最大的（强度最强的）k个结点与本结点的连接。在DARTS的文章中，CNN中选择k=2。</p><p><a href="https://arxiv.org/pdf/1806.09055.pdf" target="_blank" rel="noopener">DARTS论文</a></p><p><a href="https://zhuanlan.zhihu.com/p/73037439" target="_blank" rel="noopener">具体公式推导</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Search-Space&quot;&gt;&lt;a href=&quot;#Search-Space&quot; class=&quot;headerlink&quot; title=&quot;Search Space&quot;&gt;&lt;/a&gt;Search Space&lt;/h1&gt;&lt;p&gt;搜索cell作为网络结构的构件。cell是包含N个结点的有序
      
    
    </summary>
    
    
      <category term="Deep Learning" scheme="http://yoursite.com/categories/Deep-Learning/"/>
    
    
      <category term="deep learning" scheme="http://yoursite.com/tags/deep-learning/"/>
    
  </entry>
  
  <entry>
    <title>李弘毅ML课程作业-03：CNN</title>
    <link href="http://yoursite.com/2020/04/08/MLHW3/"/>
    <id>http://yoursite.com/2020/04/08/MLHW3/</id>
    <published>2020-04-08T08:48:09.000Z</published>
    <updated>2020-04-08T12:27:00.269Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据集准备"><a href="#数据集准备" class="headerlink" title="数据集准备"></a>数据集准备</h1><p>本次作业任务是食物分类，一共有11种食物。作业提供了三个数据集：training set，validation set，testing set。打开 training set 可以看到数据集是这样的：</p><p><img src="/images/HW3/samples.png" alt="samples" style="zoom:67%;"></p><p>数据集由许多张不同种类的食物图片组成，图片的文件名格式是“类别号_图像编号”，类别号为0~10。我们需要将数据集读入程序，并调整为pytorch数据集的格式。</p><h2 id="读入数据集"><a href="#读入数据集" class="headerlink" title="读入数据集"></a>读入数据集</h2><ol><li>必要的 package 的导入</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Import需要的套件</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader, Dataset</span><br><span class="line"><span class="keyword">import</span> time</span><br></pre></td></tr></table></figure><ol><li>读取照片并存放到 numpy array 中 </li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readfile</span><span class="params">(path, label)</span>:</span></span><br><span class="line">    <span class="comment"># label 是一個 boolean variable，代表需不需要回傳 y 值</span></span><br><span class="line">    image_dir = sorted(os.listdir(path))</span><br><span class="line">    x = np.zeros((len(image_dir), <span class="number">128</span>, <span class="number">128</span>, <span class="number">3</span>), dtype=np.uint8)</span><br><span class="line">    y = np.zeros((len(image_dir)), dtype=np.uint8)</span><br><span class="line">    <span class="keyword">for</span> i, file <span class="keyword">in</span> enumerate(image_dir):</span><br><span class="line">        img = cv2.imread(os.path.join(path, file))</span><br><span class="line">        x[i, :, :] = cv2.resize(img,(<span class="number">128</span>, <span class="number">128</span>))</span><br><span class="line">        <span class="keyword">if</span> label:</span><br><span class="line">          y[i] = int(file.split(<span class="string">"_"</span>)[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">if</span> label:</span><br><span class="line">      <span class="keyword">return</span> x, y</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><p>经过 readfile 函数的处理之后，x是储存了图像数据的 numpy 数组，y是储存了图像标签（类别号）的 numpy 数组。其中，y[i] 就是图像 x[i] 的标签。此外，数据集中的图像尺寸不一，readfile 函数在读入时全部 resize 成了 128×128 大小。</p><ol><li>使用 readfile 函数将三个数据集读取进来</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">workspace_dir = <span class="string">'./food-11'</span></span><br><span class="line">print(<span class="string">"Reading data"</span>)</span><br><span class="line">train_x, train_y = readfile(os.path.join(workspace_dir, <span class="string">"training"</span>), <span class="literal">True</span>)</span><br><span class="line">print(<span class="string">"Size of training data = &#123;&#125;"</span>.format(len(train_x)))</span><br><span class="line">val_x, val_y = readfile(os.path.join(workspace_dir, <span class="string">"validation"</span>), <span class="literal">True</span>)</span><br><span class="line">print(<span class="string">"Size of validation data = &#123;&#125;"</span>.format(len(val_x)))</span><br><span class="line">test_x = readfile(os.path.join(workspace_dir, <span class="string">"testing"</span>), <span class="literal">False</span>)</span><br><span class="line">print(<span class="string">"Size of Testing data = &#123;&#125;"</span>.format(len(test_x)))</span><br></pre></td></tr></table></figure><h2 id="调整为-PyTorch-数据集格式"><a href="#调整为-PyTorch-数据集格式" class="headerlink" title="调整为 PyTorch 数据集格式"></a>调整为 PyTorch 数据集格式</h2><p>在 Pytorch 中，我们可以利用 torch.utils.data 的 Dataset 及 DataLoader 來”包装” data，使后续的 training 及 testing 更为方便。</p><p>Dataset 需要 overload 两个函数：__len__ 及 __getitem__</p><p>__len__ 必须要回传 dataset 的大小，而 __getitem__ 则定义了当程序利用 [ ] 取值時，dataset 应该要怎么回传资料。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#training 時做 data augmentation</span></span><br><span class="line">train_transform = transforms.Compose([</span><br><span class="line">    transforms.ToPILImage(),</span><br><span class="line">    transforms.RandomHorizontalFlip(), <span class="comment">#隨機將圖片水平翻轉</span></span><br><span class="line">    transforms.RandomRotation(<span class="number">15</span>), <span class="comment">#隨機旋轉圖片</span></span><br><span class="line">    transforms.ToTensor(), <span class="comment">#將圖片轉成 Tensor，並把數值normalize到[0,1](data normalization)</span></span><br><span class="line">])</span><br><span class="line"><span class="comment">#testing 時不需做 data augmentation</span></span><br><span class="line">test_transform = transforms.Compose([</span><br><span class="line">    transforms.ToPILImage(),                                    </span><br><span class="line">    transforms.ToTensor(),</span><br><span class="line">])</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImgDataset</span><span class="params">(Dataset)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y=None, transform=None)</span>:</span></span><br><span class="line">        self.x = x</span><br><span class="line">        <span class="comment"># label is required to be a LongTensor</span></span><br><span class="line">        self.y = y</span><br><span class="line">        <span class="keyword">if</span> y <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self.y = torch.LongTensor(y)</span><br><span class="line">        self.transform = transform</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> len(self.x)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, index)</span>:</span></span><br><span class="line">        X = self.x[index]</span><br><span class="line">        <span class="keyword">if</span> self.transform <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            X = self.transform(X)</span><br><span class="line">        <span class="keyword">if</span> self.y <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            Y = self.y[index]</span><br><span class="line">            <span class="keyword">return</span> X, Y</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> X</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">batch_size = <span class="number">128</span></span><br><span class="line">train_set = ImgDataset(train_x, train_y, train_transform)</span><br><span class="line">val_set = ImgDataset(val_x, val_y, test_transform)</span><br><span class="line">train_loader = DataLoader(train_set, batch_size=batch_size, shuffle=<span class="literal">True</span>)</span><br><span class="line">val_loader = DataLoader(val_set, batch_size=batch_size, shuffle=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h1 id="CNN模型"><a href="#CNN模型" class="headerlink" title="CNN模型"></a>CNN模型</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Classifier</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(Classifier, self).__init__()</span><br><span class="line">        <span class="comment">#torch.nn.Conv2d(in_channels, out_channels, kernel_size, stride, padding)</span></span><br><span class="line">        <span class="comment">#torch.nn.MaxPool2d(kernel_size, stride, padding)</span></span><br><span class="line">        <span class="comment">#input 維度 [3, 128, 128]</span></span><br><span class="line">        self.cnn = nn.Sequential(</span><br><span class="line">            nn.Conv2d(<span class="number">3</span>, <span class="number">64</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>),  <span class="comment"># [64, 128, 128]</span></span><br><span class="line">            nn.BatchNorm2d(<span class="number">64</span>),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>),      <span class="comment"># [64, 64, 64]</span></span><br><span class="line"></span><br><span class="line">            nn.Conv2d(<span class="number">64</span>, <span class="number">128</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>), <span class="comment"># [128, 64, 64]</span></span><br><span class="line">            nn.BatchNorm2d(<span class="number">128</span>),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>),      <span class="comment"># [128, 32, 32]</span></span><br><span class="line"></span><br><span class="line">            nn.Conv2d(<span class="number">128</span>, <span class="number">256</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>), <span class="comment"># [256, 32, 32]</span></span><br><span class="line">            nn.BatchNorm2d(<span class="number">256</span>),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>),      <span class="comment"># [256, 16, 16]</span></span><br><span class="line"></span><br><span class="line">            nn.Conv2d(<span class="number">256</span>, <span class="number">512</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>), <span class="comment"># [512, 16, 16]</span></span><br><span class="line">            nn.BatchNorm2d(<span class="number">512</span>),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>),       <span class="comment"># [512, 8, 8]</span></span><br><span class="line">            </span><br><span class="line">            nn.Conv2d(<span class="number">512</span>, <span class="number">512</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>), <span class="comment"># [512, 8, 8]</span></span><br><span class="line">            nn.BatchNorm2d(<span class="number">512</span>),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>),       <span class="comment"># [512, 4, 4]</span></span><br><span class="line">        )</span><br><span class="line">        self.fc = nn.Sequential(</span><br><span class="line">            nn.Linear(<span class="number">512</span>*<span class="number">4</span>*<span class="number">4</span>, <span class="number">1024</span>),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.Linear(<span class="number">1024</span>, <span class="number">512</span>),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.Linear(<span class="number">512</span>, <span class="number">11</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        out = self.cnn(x)</span><br><span class="line">        out = out.view(out.size()[<span class="number">0</span>], <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> self.fc(out)</span><br></pre></td></tr></table></figure><h1 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h1><p>使用 training set 训练，并利用 validation set 寻找好的参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">model = Classifier().cuda()</span><br><span class="line">loss = nn.CrossEntropyLoss() <span class="comment"># 因為是 classification task，所以 loss 使用 CrossEntropyLoss</span></span><br><span class="line">optimizer = torch.optim.Adam(model.parameters(), lr=<span class="number">0.001</span>) <span class="comment"># optimizer 使用 Adam</span></span><br><span class="line">num_epoch = <span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(num_epoch):</span><br><span class="line">    epoch_start_time = time.time()</span><br><span class="line">    train_acc = <span class="number">0.0</span></span><br><span class="line">    train_loss = <span class="number">0.0</span></span><br><span class="line">    val_acc = <span class="number">0.0</span></span><br><span class="line">    val_loss = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">    model.train() <span class="comment"># 確保 model 是在 train model (開啟 Dropout 等...)</span></span><br><span class="line">    <span class="keyword">for</span> i, data <span class="keyword">in</span> enumerate(train_loader):</span><br><span class="line">        optimizer.zero_grad() <span class="comment"># 用 optimizer 將 model 參數的 gradient 歸零</span></span><br><span class="line">        train_pred = model(data[<span class="number">0</span>].cuda()) <span class="comment"># 利用 model 得到預測的機率分佈 這邊實際上就是去呼叫 model 的 forward 函數</span></span><br><span class="line">        batch_loss = loss(train_pred, data[<span class="number">1</span>].cuda()) <span class="comment"># 計算 loss （注意 prediction 跟 label 必須同時在 CPU 或是 GPU 上）</span></span><br><span class="line">        batch_loss.backward() <span class="comment"># 利用 back propagation 算出每個參數的 gradient</span></span><br><span class="line">        optimizer.step() <span class="comment"># 以 optimizer 用 gradient 更新參數值</span></span><br><span class="line"></span><br><span class="line">        train_acc += np.sum(np.argmax(train_pred.cpu().data.numpy(), axis=<span class="number">1</span>) == data[<span class="number">1</span>].numpy())</span><br><span class="line">        train_loss += batch_loss.item()</span><br><span class="line">    </span><br><span class="line">    model.eval()</span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> i, data <span class="keyword">in</span> enumerate(val_loader):</span><br><span class="line">            val_pred = model(data[<span class="number">0</span>].cuda())</span><br><span class="line">            batch_loss = loss(val_pred, data[<span class="number">1</span>].cuda())</span><br><span class="line"></span><br><span class="line">            val_acc += np.sum(np.argmax(val_pred.cpu().data.numpy(), axis=<span class="number">1</span>) == data[<span class="number">1</span>].numpy())</span><br><span class="line">            val_loss += batch_loss.item()</span><br><span class="line"></span><br><span class="line">        <span class="comment">#將結果 print 出來</span></span><br><span class="line">        print(<span class="string">'[%03d/%03d] %2.2f sec(s) Train Acc: %3.6f Loss: %3.6f | Val Acc: %3.6f loss: %3.6f'</span> % \</span><br><span class="line">            (epoch + <span class="number">1</span>, num_epoch, time.time()-epoch_start_time, \</span><br><span class="line">             train_acc/train_set.__len__(), train_loss/train_set.__len__(), val_acc/val_set.__len__(), val_loss/val_set.__len__()))</span><br></pre></td></tr></table></figure><p>得到好的参数后，我们使用 training set 和 validation set 共同训练（资料量变多，模型效果较好）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">train_val_x = np.concatenate((train_x, val_x), axis=<span class="number">0</span>)</span><br><span class="line">train_val_y = np.concatenate((train_y, val_y), axis=<span class="number">0</span>)</span><br><span class="line">train_val_set = ImgDataset(train_val_x, train_val_y, train_transform)</span><br><span class="line">train_val_loader = DataLoader(train_val_set, batch_size=batch_size, shuffle=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">model_best = Classifier().cuda()</span><br><span class="line">loss = nn.CrossEntropyLoss() <span class="comment"># 因為是 classification task，所以 loss 使用 CrossEntropyLoss</span></span><br><span class="line">optimizer = torch.optim.Adam(model_best.parameters(), lr=<span class="number">0.001</span>) <span class="comment"># optimizer 使用 Adam</span></span><br><span class="line">num_epoch = <span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(num_epoch):</span><br><span class="line">    epoch_start_time = time.time()</span><br><span class="line">    train_acc = <span class="number">0.0</span></span><br><span class="line">    train_loss = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">    model_best.train()</span><br><span class="line">    <span class="keyword">for</span> i, data <span class="keyword">in</span> enumerate(train_val_loader):</span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        train_pred = model_best(data[<span class="number">0</span>].cuda())</span><br><span class="line">        batch_loss = loss(train_pred, data[<span class="number">1</span>].cuda())</span><br><span class="line">        batch_loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line"></span><br><span class="line">        train_acc += np.sum(np.argmax(train_pred.cpu().data.numpy(), axis=<span class="number">1</span>) == data[<span class="number">1</span>].numpy())</span><br><span class="line">        train_loss += batch_loss.item()</span><br><span class="line"></span><br><span class="line">        <span class="comment">#將結果 print 出來</span></span><br><span class="line">    print(<span class="string">'[%03d/%03d] %2.2f sec(s) Train Acc: %3.6f Loss: %3.6f'</span> % \</span><br><span class="line">      (epoch + <span class="number">1</span>, num_epoch, time.time()-epoch_start_time, \</span><br><span class="line">      train_acc/train_val_set.__len__(), train_loss/train_val_set.__len__()))</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>利用刚刚 train 好的 model 进行 prediction</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">test_set = ImgDataset(test_x, transform=test_transform)</span><br><span class="line">test_loader = DataLoader(test_set, batch_size=batch_size, shuffle=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">model_best.eval()</span><br><span class="line">prediction = []</span><br><span class="line"><span class="keyword">with</span> torch.no_grad():</span><br><span class="line">    <span class="keyword">for</span> i, data <span class="keyword">in</span> enumerate(test_loader):</span><br><span class="line">        test_pred = model_best(data.cuda())</span><br><span class="line">        test_label = np.argmax(test_pred.cpu().data.numpy(), axis=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> test_label:</span><br><span class="line">            prediction.append(y)</span><br><span class="line">            </span><br><span class="line"><span class="comment">#將結果寫入 csv 檔</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"predict.csv"</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">'Id,Category\n'</span>)</span><br><span class="line">    <span class="keyword">for</span> i, y <span class="keyword">in</span>  enumerate(prediction):</span><br><span class="line">        f.write(<span class="string">'&#123;&#125;,&#123;&#125;\n'</span>.format(i, y))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据集准备&quot;&gt;&lt;a href=&quot;#数据集准备&quot; class=&quot;headerlink&quot; title=&quot;数据集准备&quot;&gt;&lt;/a&gt;数据集准备&lt;/h1&gt;&lt;p&gt;本次作业任务是食物分类，一共有11种食物。作业提供了三个数据集：training set，validation se
      
    
    </summary>
    
    
      <category term="Machine Learning" scheme="http://yoursite.com/categories/Machine-Learning/"/>
    
    
      <category term="machine learning" scheme="http://yoursite.com/tags/machine-learning/"/>
    
  </entry>
  
  <entry>
    <title>罗翔讲刑法--金句笔记</title>
    <link href="http://yoursite.com/2020/03/21/%E7%BD%97%E7%BF%94%E9%87%91%E5%8F%A5%E5%90%88%E9%9B%86/"/>
    <id>http://yoursite.com/2020/03/21/罗翔金句合集/</id>
    <published>2020-03-21T13:30:53.000Z</published>
    <updated>2020-03-21T13:49:35.941Z</updated>
    
    <content type="html"><![CDATA[<ol><li>我们之所以做一个道德的人，不是为了追求幸福，而只是因为这本身就无愧于我们已经拥有的幸福。</li><li>一个人不能处分自己最重要的利益，因为自由不能以彻底放弃自由为代价。（这样的自由一定会导致强者对弱者的剥削。）</li><li>法益作为入罪的基础，而伦理作为出罪的依据。</li><li>犯罪是可怕的，但比犯罪更可怕的是不受约束的刑罚权力。</li><li>一次不公正的审判，其恶果甚至超过十次犯罪。因为犯罪虽是无视法律——好比污染了水流，而不公正的审判则毁坏法律——好比污染水源。（培根）</li><li>自从有刑法存在国家代替受害人私刑报复时开始，国家就承担了双重责任，因此表现出它的悖论性。刑法不仅要面对犯罪人保护国家，也要面对国家保护犯罪人，不单面对犯罪人也要面对检察官保护市民，成为公民反对私法专横和错误的大宪章。（德国法学家拉德布鲁赫）</li><li>如果刑罚权不受限制，那么一切正义都有可能被架空，而且往往是以正义的名义来架空正义。</li><li>权力导致腐败，绝对权力导致绝对腐败。</li><li>刑法是一根带哨子的皮鞭。</li><li>当立法权和司法权合二为一，独裁就不可避免，自由就荡然无存。（孟德斯鸠）</li><li>法治的精神在于限权。</li><li>如果衣服上出现了褶皱，司法机关可以用熨斗把它熨平，但如果衣服上出现了一个大洞，那就必须取决于立法机关把它织补。（英国丹宁勋爵）</li><li>法律是一种平衡的艺术，要在诸多对立价值中寻找一个平衡点。</li><li>有一种鸟是永远也关不住的，因为它的每片羽翼上都沾满了自由的光辉。（《肖申克的救赎》经典台词）</li><li>法律要倾听民众的声音，但是要超越民众的偏见。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;我们之所以做一个道德的人，不是为了追求幸福，而只是因为这本身就无愧于我们已经拥有的幸福。&lt;/li&gt;
&lt;li&gt;一个人不能处分自己最重要的利益，因为自由不能以彻底放弃自由为代价。（这样的自由一定会导致强者对弱者的剥削。）&lt;/li&gt;
&lt;li&gt;法益作为入罪的基础，而伦理
      
    
    </summary>
    
    
      <category term="Law" scheme="http://yoursite.com/categories/Law/"/>
    
    
      <category term="law" scheme="http://yoursite.com/tags/law/"/>
    
  </entry>
  
  <entry>
    <title>李弘毅ML课程作业-02：线性二元分类器</title>
    <link href="http://yoursite.com/2020/03/21/MLHW2/"/>
    <id>http://yoursite.com/2020/03/21/MLHW2/</id>
    <published>2020-03-21T08:48:09.000Z</published>
    <updated>2020-03-22T13:14:11.306Z</updated>
    
    <content type="html"><![CDATA[<h3 id="作业描述"><a href="#作业描述" class="headerlink" title="作业描述"></a>作业描述</h3><p>​        根据人们的个人资料，判断其年收入是否高于$50, 000。这其实是个二元分类问题，本文将以 logistic regression 和 generative model 两种方法达成分类目的。</p><p>​        作业提供了五个文件，其中在训练过程中，只有X_train、Y_train 和 X_test 这三个经过处理的档案会被使用到，train.csv 和 test.csv 是原始资料，供以参考。</p><h3 id="Logistic-Regression"><a href="#Logistic-Regression" class="headerlink" title="Logistic Regression"></a>Logistic Regression</h3><h4 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h4><p>​        先打开看一下数据集长什么样子。训练集数据的各种属性资料都已经数字化了；训练集的标签就是二元化的标签，年收入高于$50, 000为1，否则为0。</p><p><img src="/images/HW2/train_data.png" alt="train_data" style="zoom:67%;"></p><p><img src="/images/HW2/train_label.png" alt="train_label" style="zoom:67%;"></p><p>​        读入数据。由于第一行是数据说明，不必存到数组中，所以用next()函数跳过。数据集的第一列是id号，也不必存到数组中，所以数组存入的数据是从第二行第二列开始直到最后。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">X_train_fpath = <span class="string">'./data/X_train'</span></span><br><span class="line">Y_train_fpath = <span class="string">'./data/Y_train'</span></span><br><span class="line">X_test_fpath = <span class="string">'./data/X_test'</span></span><br><span class="line">output_fpath = <span class="string">'./output_&#123;&#125;.csv'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Parse csv files to numpy array</span></span><br><span class="line"><span class="keyword">with</span> open(X_train_fpath) <span class="keyword">as</span> f:</span><br><span class="line">    next(f)</span><br><span class="line">    X_train = np.array([line.strip(<span class="string">'\n'</span>).split(<span class="string">','</span>)[<span class="number">1</span>:] <span class="keyword">for</span> line <span class="keyword">in</span> f], dtype=float)</span><br><span class="line"><span class="keyword">with</span> open(Y_train_fpath) <span class="keyword">as</span> f:</span><br><span class="line">    next(f)</span><br><span class="line">    Y_train = np.array([line.strip(<span class="string">'\n'</span>).split(<span class="string">','</span>)[<span class="number">1</span>] <span class="keyword">for</span> line <span class="keyword">in</span> f], dtype=float)</span><br><span class="line"><span class="keyword">with</span> open(X_test_fpath) <span class="keyword">as</span> f:</span><br><span class="line">    next(f)</span><br><span class="line">    X_test = np.array([line.strip(<span class="string">'\n'</span>).split(<span class="string">','</span>)[<span class="number">1</span>:] <span class="keyword">for</span> line <span class="keyword">in</span> f], dtype=float)</span><br></pre></td></tr></table></figure><p>​        先定义几个辅助函数。_normalize 函数用来对于数据集的特定列（某属性特征）进行归一化，注释有详细说明。_train_dev_split 函数用于将训练数据集划分为training set和 development set。我们拿不到 testing set 的正确标签，要用development set 来评估性能，而且也能防止过拟合。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_normalize</span><span class="params">(X, train=True, specified_column = None, X_mean = None, X_std = None)</span>:</span></span><br><span class="line">    <span class="comment"># This function normalizes specific columns of X.</span></span><br><span class="line">    <span class="comment"># The mean and standard variance of training data will be reused when processing testing data.</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Arguments:</span></span><br><span class="line">    <span class="comment">#     X: data to be processed</span></span><br><span class="line">    <span class="comment">#     train: 'True' when processing training data, 'False' for testing data</span></span><br><span class="line">    <span class="comment">#     specific_column: indexes of the columns that will be normalized. If 'None', all columns</span></span><br><span class="line">    <span class="comment">#         will be normalized.</span></span><br><span class="line">    <span class="comment">#     X_mean: mean value of training data, used when train = 'False'</span></span><br><span class="line">    <span class="comment">#     X_std: standard deviation of training data, used when train = 'False'</span></span><br><span class="line">    <span class="comment"># Outputs:</span></span><br><span class="line">    <span class="comment">#     X: normalized data</span></span><br><span class="line">    <span class="comment">#     X_mean: computed mean value of training data</span></span><br><span class="line">    <span class="comment">#     X_std: computed standard deviation of training data</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> specified_column == <span class="literal">None</span>:</span><br><span class="line">        specified_column = np.arange(X.shape[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> train:</span><br><span class="line">        X_mean = np.mean(X[:, specified_column], <span class="number">0</span>).reshape(<span class="number">1</span>, <span class="number">-1</span>)</span><br><span class="line">        X_std = np.std(X[:, specified_column], <span class="number">0</span>).reshape(<span class="number">1</span>, <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">    X[:, specified_column] = (X[:, specified_column] - X_mean) / (X_std + <span class="number">1e-8</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> X, X_mean, X_std</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_train_dev_split</span><span class="params">(X, Y, dev_ratio=<span class="number">0.25</span>)</span>:</span></span><br><span class="line">    <span class="string">"""This function splits data into training set and development set."""</span></span><br><span class="line">    train_size = int(len(X)*(<span class="number">1</span> - dev_ratio))</span><br><span class="line">    <span class="keyword">return</span> X[:train_size], Y[:train_size], X[train_size:], Y[train_size:]</span><br></pre></td></tr></table></figure><p>​        进行归一化和划分训练集。training set 大小：48, 830 × 510；development set 大小：5, 426 × 510；testing set 大小：27, 622 × 510。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Normalize training and testing data</span></span><br><span class="line">X_train, X_mean, X_std = _normalize(X_train, train=<span class="literal">True</span>)</span><br><span class="line">X_test, _, _ = _normalize(X_test, train=<span class="literal">False</span>, specified_column=<span class="literal">None</span>, X_mean=X_mean, X_std=X_std)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Split data into training set and development set</span></span><br><span class="line">dev_ratio = <span class="number">0.1</span></span><br><span class="line">X_train, Y_train, X_dev, Y_dev = _train_dev_split(X_train, Y_train, dev_ratio)</span><br><span class="line"></span><br><span class="line">train_size = X_train.shape[<span class="number">0</span>]</span><br><span class="line">dev_size = X_dev.shape[<span class="number">0</span>]</span><br><span class="line">test_size = X_test.shape[<span class="number">0</span>]</span><br><span class="line">data_dim = X_train.shape[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h4 id="一些辅助函数"><a href="#一些辅助函数" class="headerlink" title="一些辅助函数"></a>一些辅助函数</h4><p>​        _shuffle 方法将X和Y的所有元素同时随机排序，X中某元素依然对应着在Y中对应着原先所对应的元素（data-label pair 不变）。_f 就是 logistic 回归函数，函数输出值在0到1之间，越接近于1，表示年收入高于$50, 000的概率越大。</p><script type="math/tex; mode=display">\sigma (z) = 1/(1+e^{-z})</script><script type="math/tex; mode=display">f_{w,b}=\sigma （\sum_{i}w_{i}x_{i}+b）</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_shuffle</span><span class="params">(X, Y)</span>:</span></span><br><span class="line">    <span class="comment"># This function shuffles two equal-length list/array, X and Y, together.</span></span><br><span class="line">    randomize = np.arange(len(X))</span><br><span class="line">    np.random.shuffle(randomize)</span><br><span class="line">    <span class="keyword">return</span> (X[randomize], Y[randomize])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_sigmoid</span><span class="params">(z)</span>:</span></span><br><span class="line">    <span class="comment"># Sigmoid function can be used to calculate probability.</span></span><br><span class="line">    <span class="comment"># To avoid overflow, minimum/maximum output value is set.</span></span><br><span class="line">    <span class="keyword">return</span> np.clip(<span class="number">1</span> / (<span class="number">1.0</span> + np.exp(-z)), <span class="number">1e-8</span>, <span class="number">1</span> - (<span class="number">1e-8</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_f</span><span class="params">(X, w, b)</span>:</span></span><br><span class="line">    <span class="comment"># This is the logistic regression function, parameterized by w and b</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Arguements:</span></span><br><span class="line">    <span class="comment">#     X: input data, shape = [batch_size, data_dimension]</span></span><br><span class="line">    <span class="comment">#     w: weight vector, shape = [data_dimension, ]</span></span><br><span class="line">    <span class="comment">#     b: bias, scalar</span></span><br><span class="line">    <span class="comment"># Output:</span></span><br><span class="line">    <span class="comment">#     predicted probability of each row of X being positively labeled, shape = [batch_size, ]</span></span><br><span class="line">    <span class="keyword">return</span> _sigmoid(np.matmul(X, w) + b)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_predict</span><span class="params">(X, w, b)</span>:</span></span><br><span class="line">    <span class="comment"># This function returns a truth value prediction for each row of X </span></span><br><span class="line">    <span class="comment"># by rounding the result of logistic regression function.</span></span><br><span class="line">    <span class="keyword">return</span> np.round(_f(X, w, b)).astype(np.int)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_accuracy</span><span class="params">(Y_pred, Y_label)</span>:</span></span><br><span class="line">    <span class="comment"># This function calculates prediction accuracy</span></span><br><span class="line">    acc = <span class="number">1</span> - np.mean(np.abs(Y_pred - Y_label))</span><br><span class="line">    <span class="keyword">return</span> acc</span><br></pre></td></tr></table></figure><h4 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h4><p>​        使用的是交叉熵损失函数：</p><script type="math/tex; mode=display">L(f)=\sum_{n}C(f(x^{n}),\widehat{y}^{n})</script><script type="math/tex; mode=display">C(f(x^{n}),\widehat{y}^{n})=-[\widehat{y}^{n}lnf(x^{n})+(1-\widehat{y}^{n})ln(1-f(x^{n}))]</script><p>利用损失函数对权重的梯度值，权重更新公式如下。</p><script type="math/tex; mode=display">w_{i} \leftarrow w_{i}-\eta \sum_{i}[-(\widehat{y}^{n}-f_{w,b}(x^{n}))x_{i}^{n}]</script><p>交叉熵和梯度值计算代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_cross_entropy_loss</span><span class="params">(y_pred, Y_label)</span>:</span></span><br><span class="line">    <span class="comment"># This function computes the cross entropy.</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Arguements:</span></span><br><span class="line">    <span class="comment">#     y_pred: probabilistic predictions, float vector</span></span><br><span class="line">    <span class="comment">#     Y_label: ground truth labels, bool vector</span></span><br><span class="line">    <span class="comment"># Output:</span></span><br><span class="line">    <span class="comment">#     cross entropy, scalar</span></span><br><span class="line">    cross_entropy = -np.dot(Y_label, np.log(y_pred)) - np.dot((<span class="number">1</span> - Y_label), np.log(<span class="number">1</span> - y_pred))</span><br><span class="line">    <span class="keyword">return</span> cross_entropy</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_gradient</span><span class="params">(X, Y_label, w, b)</span>:</span></span><br><span class="line">    <span class="comment"># This function computes the gradient of cross entropy loss with respect to weight w and bias b.</span></span><br><span class="line">    y_pred = _f(X, w, b)</span><br><span class="line">    pred_error = Y_label - y_pred</span><br><span class="line">    w_grad = -np.sum(pred_error * X.T, <span class="number">1</span>)</span><br><span class="line">    b_grad = -np.sum(pred_error)</span><br><span class="line">    <span class="keyword">return</span> w_grad, b_grad</span><br></pre></td></tr></table></figure><p>​        使用mini-batch gradient descent 来训练。“訓練資料被分為許多小批次，針對每一個小批次，我們分別計算其梯度以及損失，並根據該批次來更新模型的參數。當一次迴圈完成，也就是整個訓練集的所有小批次都被使用過一次以後，我們將所有訓練資料打散並且重新分成新的小批次，進行下一個迴圈，直到事先設定的迴圈數量達成為止。”（来自作业demo）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Zero initialization for weights ans bias</span></span><br><span class="line">w = np.zeros((data_dim,)) </span><br><span class="line">b = np.zeros((<span class="number">1</span>,))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Some parameters for training    </span></span><br><span class="line">max_iter = <span class="number">10</span></span><br><span class="line">batch_size = <span class="number">8</span></span><br><span class="line">learning_rate = <span class="number">0.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Keep the loss and accuracy at every iteration for plotting</span></span><br><span class="line">train_loss = []</span><br><span class="line">dev_loss = []</span><br><span class="line">train_acc = []</span><br><span class="line">dev_acc = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># Calcuate the number of parameter updates</span></span><br><span class="line">step = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Iterative training</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(max_iter):</span><br><span class="line">    <span class="comment"># Random shuffle at the begging of each epoch</span></span><br><span class="line">    X_train, Y_train = _shuffle(X_train, Y_train)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># Mini-batch training</span></span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> range(int(np.floor(train_size / batch_size))):</span><br><span class="line">        X = X_train[idx*batch_size:(idx+<span class="number">1</span>)*batch_size]</span><br><span class="line">        Y = Y_train[idx*batch_size:(idx+<span class="number">1</span>)*batch_size]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Compute the gradient</span></span><br><span class="line">        w_grad, b_grad = _gradient(X, Y, w, b)</span><br><span class="line">            </span><br><span class="line">        <span class="comment"># gradient descent update</span></span><br><span class="line">        <span class="comment"># learning rate decay with time</span></span><br><span class="line">        w = w - learning_rate/np.sqrt(step) * w_grad</span><br><span class="line">        b = b - learning_rate/np.sqrt(step) * b_grad</span><br><span class="line"></span><br><span class="line">        step = step + <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">    <span class="comment"># Compute loss and accuracy of training set and development set</span></span><br><span class="line">    y_train_pred = _f(X_train, w, b)</span><br><span class="line">    Y_train_pred = np.round(y_train_pred)</span><br><span class="line">    train_acc.append(_accuracy(Y_train_pred, Y_train))</span><br><span class="line">    train_loss.append(_cross_entropy_loss(y_train_pred, Y_train) / train_size)</span><br><span class="line"></span><br><span class="line">    y_dev_pred = _f(X_dev, w, b)</span><br><span class="line">    Y_dev_pred = np.round(y_dev_pred)</span><br><span class="line">    dev_acc.append(_accuracy(Y_dev_pred, Y_dev))</span><br><span class="line">    dev_loss.append(_cross_entropy_loss(y_dev_pred, Y_dev) / dev_size)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Training loss: &#123;&#125;'</span>.format(train_loss[<span class="number">-1</span>]))</span><br><span class="line">print(<span class="string">'Development loss: &#123;&#125;'</span>.format(dev_loss[<span class="number">-1</span>]))</span><br><span class="line">print(<span class="string">'Training accuracy: &#123;&#125;'</span>.format(train_acc[<span class="number">-1</span>]))</span><br><span class="line">print(<span class="string">'Development accuracy: &#123;&#125;'</span>.format(dev_acc[<span class="number">-1</span>]))</span><br></pre></td></tr></table></figure><h4 id="绘制-loss-和-accuracy-曲线"><a href="#绘制-loss-和-accuracy-曲线" class="headerlink" title="绘制 loss 和 accuracy 曲线"></a>绘制 loss 和 accuracy 曲线</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># Loss curve</span></span><br><span class="line">plt.plot(train_loss)</span><br><span class="line">plt.plot(dev_loss)</span><br><span class="line">plt.title(<span class="string">'Loss'</span>)</span><br><span class="line">plt.legend([<span class="string">'train'</span>, <span class="string">'dev'</span>])</span><br><span class="line">plt.savefig(<span class="string">'loss.png'</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Accuracy curve</span></span><br><span class="line">plt.plot(train_acc)</span><br><span class="line">plt.plot(dev_acc)</span><br><span class="line">plt.title(<span class="string">'Accuracy'</span>)</span><br><span class="line">plt.legend([<span class="string">'train'</span>, <span class="string">'dev'</span>])</span><br><span class="line">plt.savefig(<span class="string">'acc.png'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="保存测试集结果"><a href="#保存测试集结果" class="headerlink" title="保存测试集结果"></a>保存测试集结果</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Predict testing labels</span></span><br><span class="line">predictions = _predict(X_test, w, b)</span><br><span class="line"><span class="keyword">with</span> open(output_fpath.format(<span class="string">'logistic'</span>), <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">'id,label\n'</span>)</span><br><span class="line">    <span class="keyword">for</span> i, label <span class="keyword">in</span>  enumerate(predictions):</span><br><span class="line">        f.write(<span class="string">'&#123;&#125;,&#123;&#125;\n'</span>.format(i, label))</span><br></pre></td></tr></table></figure><h3 id="Probabilistic-Generative-Model"><a href="#Probabilistic-Generative-Model" class="headerlink" title="Probabilistic Generative Model"></a>Probabilistic Generative Model</h3><h4 id="数据准备-1"><a href="#数据准备-1" class="headerlink" title="数据准备"></a>数据准备</h4><p>​        训练集和测试集的读入和归一化处理方法与logistic regression 一模一样。但是generative model 有可解析的最佳解，因此不必使用development set。</p><h4 id="计算均值和协方差"><a href="#计算均值和协方差" class="headerlink" title="计算均值和协方差"></a>计算均值和协方差</h4><p>​        在generative model 中，需要计算出最有可能产生这个训练集的数据分布的参数，也就是均值和协方差。确定了这两个参数，分布就确定了，就可以计算出测试集中某人属于年收入高于$50, 000那一类的概率。两个类别使用同样的协方差。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Compute in-class mean</span></span><br><span class="line">X_train_0 = np.array([x <span class="keyword">for</span> x, y <span class="keyword">in</span> zip(X_train, Y_train) <span class="keyword">if</span> y == <span class="number">0</span>])</span><br><span class="line">X_train_1 = np.array([x <span class="keyword">for</span> x, y <span class="keyword">in</span> zip(X_train, Y_train) <span class="keyword">if</span> y == <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">mean_0 = np.mean(X_train_0, axis = <span class="number">0</span>)</span><br><span class="line">mean_1 = np.mean(X_train_1, axis = <span class="number">0</span>)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># Compute in-class covariance</span></span><br><span class="line">cov_0 = np.zeros((data_dim, data_dim))</span><br><span class="line">cov_1 = np.zeros((data_dim, data_dim))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> X_train_0:</span><br><span class="line">    cov_0 += np.dot(np.transpose([x - mean_0]), [x - mean_0]) / X_train_0.shape[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> X_train_1:</span><br><span class="line">    cov_1 += np.dot(np.transpose([x - mean_1]), [x - mean_1]) / X_train_1.shape[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Shared covariance is taken as a weighted average of individual in-class covariance.</span></span><br><span class="line">cov = (cov_0 * X_train_0.shape[<span class="number">0</span>] + cov_1 * X_train_1.shape[<span class="number">0</span>]) / (X_train_0.shape[<span class="number">0</span>] + X_train_1.shape[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h4 id="计算权重和偏差"><a href="#计算权重和偏差" class="headerlink" title="计算权重和偏差"></a>计算权重和偏差</h4><p>​        权重矩阵和偏差向量可以直接计算出来。这里求逆矩阵用到了SVD分解。</p><script type="math/tex; mode=display">\boldsymbol{w}=\Sigma^{-1}(\mu_{1}-\mu_{2})</script><script type="math/tex; mode=display">b=-\frac{1}{2}\mu_{1}^{T}\Sigma^{-1}\mu_{1}+\frac{1}{2}\mu_{2}^{T}\Sigma^{-1}\mu_{2}+ln\frac{N_{1}}{N_{2}}</script><p>其中$\Sigma$表示协方差，$\mu$表示均值，$N$表示样本数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Compute inverse of covariance matrix.</span></span><br><span class="line"><span class="comment"># Since covariance matrix may be nearly singular, np.linalg.inv() may give a large numerical error.</span></span><br><span class="line"><span class="comment"># Via SVD decomposition, one can get matrix inverse efficiently and accurately.</span></span><br><span class="line">u, s, v = np.linalg.svd(cov, full_matrices=<span class="literal">False</span>)</span><br><span class="line">inv = np.matmul(v.T * <span class="number">1</span> / s, u.T)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Directly compute weights and bias</span></span><br><span class="line">w = np.dot(inv, mean_0 - mean_1)</span><br><span class="line">b =  (<span class="number">-0.5</span>) * np.dot(mean_0, np.dot(inv, mean_0)) + <span class="number">0.5</span> * np.dot(mean_1, np.dot(inv, mean_1))\</span><br><span class="line">    + np.log(float(X_train_0.shape[<span class="number">0</span>]) / X_train_1.shape[<span class="number">0</span>]) </span><br><span class="line"></span><br><span class="line"><span class="comment"># Compute accuracy on training set</span></span><br><span class="line">Y_train_pred = <span class="number">1</span> - _predict(X_train, w, b)</span><br><span class="line">print(<span class="string">'Training accuracy: &#123;&#125;'</span>.format(_accuracy(Y_train_pred, Y_train)))</span><br></pre></td></tr></table></figure><h4 id="保存测试集结果-1"><a href="#保存测试集结果-1" class="headerlink" title="保存测试集结果"></a>保存测试集结果</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Predict testing labels</span></span><br><span class="line">predictions = <span class="number">1</span> - _predict(X_test, w, b)</span><br><span class="line"><span class="keyword">with</span> open(output_fpath.format(<span class="string">'generative'</span>), <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">'id,label\n'</span>)</span><br><span class="line">    <span class="keyword">for</span> i, label <span class="keyword">in</span>  enumerate(predictions):</span><br><span class="line">        f.write(<span class="string">'&#123;&#125;,&#123;&#125;\n'</span>.format(i, label))</span><br></pre></td></tr></table></figure><h3 id="Report"><a href="#Report" class="headerlink" title="Report"></a>Report</h3><ol><li>請比較實作的 generative model 及 logistic regression 的準確率，何者較佳？<br>請解釋為何有這種情況？</li></ol><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">Generative Model</th><th style="text-align:center">Logistic Regression</th></tr></thead><tbody><tr><td style="text-align:center">train</td><td style="text-align:center">87.412%</td><td style="text-align:center">88.569%</td></tr></tbody></table></div><ol><li><p>請實作 logistic regression 的正規化 (regularization)，並討論其對於你的模型<br>準確率的影響。接著嘗試對正規項使用不同的權重 (lambda)，並討論其影響。</p><p><img src="/images/HW2/lambda.png" alt="lambda" style="zoom:67%;"></p></li><li><p>請說明你實作的 best model，其訓練方式和準確率為何？</p></li><li><p>請實作輸入特徵標準化 (feature normalization)，並比較是否應用此技巧，會對<br>於你的模型有何影響。</p></li></ol><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">应用特征标准化</th><th style="text-align:center">未应用特征标准化</th></tr></thead><tbody><tr><td style="text-align:center">train</td><td style="text-align:center">88.569%</td><td style="text-align:center">83.950%</td></tr><tr><td style="text-align:center">dev</td><td style="text-align:center">87.597%</td><td style="text-align:center">83.892%</td></tr></tbody></table></div><p><a href="http://speech.ee.ntu.edu.tw/~tlkagk/courses_ML20.html" target="_blank" rel="noopener">李弘毅老师ML课程主页</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;作业描述&quot;&gt;&lt;a href=&quot;#作业描述&quot; class=&quot;headerlink&quot; title=&quot;作业描述&quot;&gt;&lt;/a&gt;作业描述&lt;/h3&gt;&lt;p&gt;​        根据人们的个人资料，判断其年收入是否高于$50, 000。这其实是个二元分类问题，本文将以 logisti
      
    
    </summary>
    
    
      <category term="Machine Learning" scheme="http://yoursite.com/categories/Machine-Learning/"/>
    
    
      <category term="machine learning" scheme="http://yoursite.com/tags/machine-learning/"/>
    
  </entry>
  
  <entry>
    <title>李弘毅ML课程作业-01：PM2.5的预测</title>
    <link href="http://yoursite.com/2020/03/18/MLHW1/"/>
    <id>http://yoursite.com/2020/03/18/MLHW1/</id>
    <published>2020-03-18T04:21:09.000Z</published>
    <updated>2020-03-21T11:17:33.297Z</updated>
    
    <content type="html"><![CDATA[<h3 id="作业描述"><a href="#作业描述" class="headerlink" title="作业描述"></a>作业描述</h3><p>​        给定了训练集train.csv，要求用前9小时的数据预测出第十个小时的PM2.5的值。这是linear regression的作业。</p><h3 id="Feature-Selection"><a href="#Feature-Selection" class="headerlink" title="Feature Selection"></a>Feature Selection</h3><p>​        train.csv中每个小时给出了18个特征，其实有些特征与PM2.5关系不大。首先画一下相关矩阵热力图来观察一下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data=pd.read_csv(<span class="string">'train.csv'</span>)</span><br><span class="line">data.drop([<span class="string">'a'</span>,<span class="string">'b'</span>],axis=<span class="number">1</span>,inplace=<span class="literal">True</span>)</span><br><span class="line">column=data[<span class="string">'c'</span>].unique()</span><br><span class="line">data_new=pd.DataFrame(np.zeros([<span class="number">24</span>*<span class="number">240</span>,<span class="number">18</span>]),columns=column)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> column:</span><br><span class="line">    aa=data[data[<span class="string">'c'</span>]==i]</span><br><span class="line">    aa.drop([<span class="string">'c'</span>],axis=<span class="number">1</span>,inplace=<span class="literal">True</span>)</span><br><span class="line">    aa=np.array(aa)</span><br><span class="line">    aa[aa==<span class="string">'NR'</span>]=<span class="string">'0'</span></span><br><span class="line">    aa=aa.astype(<span class="string">'float32'</span>)</span><br><span class="line">    aa=aa.reshape(<span class="number">1</span>,<span class="number">5760</span>)</span><br><span class="line">    aa=aa.T</span><br><span class="line">    data_new[i]=aa</span><br><span class="line">label=np.array(data_new[<span class="string">'PM2.5'</span>][<span class="number">9</span>:],dtype=<span class="string">'float32'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="comment"># Draw a heatmap with the numeric values in each cell</span></span><br><span class="line">f, ax = plt.subplots(figsize=(<span class="number">9</span>, <span class="number">6</span>))</span><br><span class="line">sns.heatmap(abs(data_new.corr()), fmt=<span class="string">"d"</span>, linewidths=<span class="number">.5</span>, ax=ax, cmap=<span class="string">'Blues'</span>)</span><br><span class="line">f.savefig(<span class="string">'heatmap.png'</span>)</span><br></pre></td></tr></table></figure><p>​        这里不关心是负相关还是正相关，所以对相关矩阵取了绝对值。画出来的结果是这样的：</p><p><img src="/images/HW1/heatmap.png" alt="feature0"></p><p>对于PM2.5来说，相关性比较高的有NO2, NO1, NOx, SO2, THC, PM10等特征。</p><p>​        也可以把每个特征与PM2.5的关系绘制一下。可以观察到部分特征与PM2.5的值关系不大。</p><div class="table-container"><table><thead><tr><th><img src="/images/HW1/0-th feature.png" alt="feature0"></th><th><img src="/images/HW1/1-th feature.png" alt="feature0"></th><th><img src="/images/HW1/2-th feature.png" alt="feature0"></th><th><img src="/images/HW1/3-th feature.png" alt="feature0"></th><th><img src="/images/HW1/4-th feature.png" alt="feature0"></th><th><img src="/images/HW1/5-th feature.png" alt="feature0"></th></tr></thead><tbody><tr><td><img src="/images/HW1/6-th feature.png" alt="feature0"></td><td><img src="/images/HW1/7-th feature.png" alt="feature0"></td><td><img src="/images/HW1/8-th feature.png" alt="feature0"></td><td><img src="/images/HW1/9-th feature.png" alt="feature0"></td><td><img src="/images/HW1/10-th feature.png" alt="feature0"></td><td><img src="/images/HW1/11-th feature.png" alt="feature0"></td></tr><tr><td><img src="/images/HW1/12-th feature.png" alt="feature0"></td><td><img src="/images/HW1/13-th feature.png" alt="feature0"></td><td><img src="/images/HW1/14-th feature.png" alt="feature0"></td><td><img src="/images/HW1/15-th feature.png" alt="feature0"></td><td><img src="/images/HW1/16-th feature.png" alt="feature0"></td><td><img src="/images/HW1/17-th feature.png" alt="feature0"></td></tr></tbody></table></div><h3 id="Data-Preprocessing"><a href="#Data-Preprocessing" class="headerlink" title="Data Preprocessing"></a>Data Preprocessing</h3><p>​        这里用了作业demo给出的方法。把前9个小时的全部18个特征都作为预测第十小时PM2.5的特征。也就是说，(9*18+1) 个输入特征（加上bias）对应一个输出。输入进行了归一化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">data = pd.read_csv(<span class="string">'../train.csv'</span>, encoding=<span class="string">'big5'</span>)</span><br><span class="line">data = data.iloc[:, <span class="number">3</span>:]</span><br><span class="line">data[data == <span class="string">'NR'</span>] = <span class="number">0</span></span><br><span class="line">raw_data = data.to_numpy()</span><br><span class="line"></span><br><span class="line">month_data = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> month <span class="keyword">in</span> range(<span class="number">12</span>):</span><br><span class="line">    sample = np.empty([<span class="number">18</span>, <span class="number">480</span>])</span><br><span class="line">    <span class="keyword">for</span> day <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">        sample[:, day*<span class="number">24</span>:(day+<span class="number">1</span>)*<span class="number">24</span>] = raw_data[<span class="number">18</span>*(<span class="number">20</span>*month+day):<span class="number">18</span>*(<span class="number">20</span>*month+day+<span class="number">1</span>)]</span><br><span class="line">    month_data[month] = sample</span><br><span class="line"></span><br><span class="line">x = np.empty([<span class="number">12</span>*<span class="number">471</span>, <span class="number">18</span>*<span class="number">9</span>], dtype=float)  <span class="comment"># training data</span></span><br><span class="line">y = np.empty([<span class="number">12</span>*<span class="number">471</span>, <span class="number">1</span>], dtype=float)     <span class="comment"># training set</span></span><br><span class="line"><span class="keyword">for</span> month <span class="keyword">in</span> range(<span class="number">12</span>):</span><br><span class="line">    <span class="keyword">for</span> day <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">        <span class="keyword">for</span> hour <span class="keyword">in</span> range(<span class="number">24</span>):</span><br><span class="line">            <span class="keyword">if</span> day == <span class="number">19</span> <span class="keyword">and</span> hour &gt; <span class="number">14</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            x[month*<span class="number">471</span>+day*<span class="number">24</span>+hour, :] = month_data[month][:, day*<span class="number">24</span>+hour:day*<span class="number">24</span>+hour+<span class="number">9</span>].reshape(<span class="number">1</span>,<span class="number">-1</span>)</span><br><span class="line">            y[month*<span class="number">471</span>+day*<span class="number">24</span>+hour, <span class="number">0</span>] = month_data[month][<span class="number">9</span>, day*<span class="number">24</span>+hour+<span class="number">9</span>]   <span class="comment">#value</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Normalization</span></span><br><span class="line">mean_x = np.mean(x, axis=<span class="number">0</span>)</span><br><span class="line">std_x = np.std(x, axis=<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(x)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(x[<span class="number">0</span>])):</span><br><span class="line">        <span class="keyword">if</span> std_x[j] != <span class="number">0</span>:</span><br><span class="line">            x[i][j] = (x[i][j] - mean_x[j]) / std_x[j]</span><br></pre></td></tr></table></figure><p>​        处理完后，张量x就是输入（前9小时的所有特征），y就是输出（第十小时PM2.5值）。</p><h3 id="用不同的学习率训练"><a href="#用不同的学习率训练" class="headerlink" title="用不同的学习率训练"></a>用不同的学习率训练</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># training</span></span><br><span class="line">dim = <span class="number">18</span>*<span class="number">9</span> + <span class="number">1</span></span><br><span class="line">w = np.ones([dim, <span class="number">1</span>])</span><br><span class="line">x = np.concatenate((np.ones([<span class="number">12</span>*<span class="number">471</span>, <span class="number">1</span>]), x), axis = <span class="number">1</span>).astype(float)</span><br><span class="line">learning_rate = <span class="number">100</span></span><br><span class="line">iter_time = <span class="number">1000</span></span><br><span class="line">adagrad = np.zeros([dim, <span class="number">1</span>])</span><br><span class="line">eps = <span class="number">1e-10</span></span><br><span class="line"></span><br><span class="line">training_loss = []</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> range(iter_time):</span><br><span class="line">    loss = np.sqrt(np.sum(np.power(np.dot(x, w) - y, <span class="number">2</span>))/<span class="number">471</span>/<span class="number">12</span>) <span class="comment"># rmse</span></span><br><span class="line">    training_loss.append(loss)</span><br><span class="line">    <span class="keyword">if</span> t % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">        print(str(t)+<span class="string">":"</span>+str(loss))</span><br><span class="line">    gradient = <span class="number">2</span> * np.dot(x.transpose(), np.dot(x, w) - y) <span class="comment"># dim*1</span></span><br><span class="line">    adagrad += gradient ** <span class="number">2</span></span><br><span class="line">    w = w - learning_rate * gradient / np.sqrt(adagrad + eps)</span><br><span class="line">np.save(<span class="string">'weight.npy'</span>, w)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Save loss data</span></span><br><span class="line">fileObject = open(<span class="string">'lr_loss_'</span>+str(learning_rate)+<span class="string">'.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line"><span class="keyword">for</span> ip <span class="keyword">in</span> training_loss:</span><br><span class="line">    fileObject.write(str(ip))</span><br><span class="line">    fileObject.write(<span class="string">'\n'</span>)</span><br><span class="line">fileObject.close()</span><br></pre></td></tr></table></figure><p>在相同的参数下，分别用0.1，10，100，1000的学习率训练，看一下收敛的效果。学习率为0.1时收敛非常慢，学习率太大（如1000）时又无法收敛到最小值。</p><div class="table-container"><table><thead><tr><th><img src="/images/HW1/loss.png" alt="loss"></th><th><img src="/images/HW1/loss2.png" alt="loss2"></th></tr></thead><tbody><tr><td></td></tr></tbody></table></div><p><a href="http://speech.ee.ntu.edu.tw/~tlkagk/courses_ML20.html" target="_blank" rel="noopener">李弘毅老师ML课程主页</a></p><p><a href="https://blog.csdn.net/yinfang1252/article/details/79630222" target="_blank" rel="noopener">correlation matrix heatmap reference</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;作业描述&quot;&gt;&lt;a href=&quot;#作业描述&quot; class=&quot;headerlink&quot; title=&quot;作业描述&quot;&gt;&lt;/a&gt;作业描述&lt;/h3&gt;&lt;p&gt;​        给定了训练集train.csv，要求用前9小时的数据预测出第十个小时的PM2.5的值。这是linear r
      
    
    </summary>
    
    
      <category term="Machine Learning" scheme="http://yoursite.com/categories/Machine-Learning/"/>
    
    
      <category term="machine learning" scheme="http://yoursite.com/tags/machine-learning/"/>
    
  </entry>
  
  <entry>
    <title>我们的故事</title>
    <link href="http://yoursite.com/2019/09/27/%E6%88%91%E4%BB%AC%E7%9A%84%E6%95%85%E4%BA%8B/"/>
    <id>http://yoursite.com/2019/09/27/我们的故事/</id>
    <published>2019-09-27T04:21:09.000Z</published>
    <updated>2020-03-18T08:50:32.588Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p>他突然说要来看樱花的时候，我真的以为他是来看花的。 </p><p>虽然在同一座城市，但是我们的联系实在少的可怜。我时常忘记，在这个离家近一千公里的地方，还有一个同乡的存在。直到他说，4年了，总该来你的学校看一次樱花🌸。当他提出要我当导游的时候，我心里是万般不乐意的。多年的内向性格令我无比抗拒和不熟悉的人往来。但是他说作为报酬，会请我吃饭。于是我应邀了。</p><p>看花的那天人很多。他见到我，第一句话是：“我们多久没见了？”是的，自从大一见了两三次之后，我们这几年都没见过。虽然我们的学校只隔了一条街。那天我很拘束，后来慢慢聊开了，问了他一些我后来觉得很蠢的问题。我注意到他和大多数看花人不一样，他并没有对🌸表现出很大的兴趣。只是那时我以为，🌸不够美，不足以吸引他。</p><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p>后来我们的来往突然多了起来。我去看他的篮球赛，我们去看电影看夜景。再到后来，他突然牵我的手，我慌慌张张挣脱，才明白过来，他没把我当兄弟。那段时间我经历了生活和学习上的一些挫败，对于他表现出来的心意考虑了很多。犹豫了很多天之后，在他第三次尝试牵手的时候，我没有再挣脱。</p><p>只是我没想过，所有我以为的偶然，从来都不是偶然。</p><p>高考放榜之后偶然问起他的去向，惊讶发现我们将要去往同一座城市。</p><p>某年生日零点收到他的红包，我惊喜于他竟然记得我的生日。</p><p>后来他说，“我喜欢你的时间，要比你想象中长很多。”</p><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><p>故事是他后来告诉我的。</p><p>某天我问他，“我很好奇你是什么时候开始对我有想法的？”</p><p>”如果是说那种朦胧的感情，我很早就有了。3月份见到你，发现你还是我想象中的样子，所以确定了内心的想法。”</p><p>他说，在很早很早的时候，他对我就有很模糊朦胧的感情。大概是初中某年我找他爬山的时候？他说，“我还记得你当时的样子，留着短发，很可爱。”</p><p>他说，后来他选择脱离大环境，到另一个地方读高中，却会偶尔想起我。</p><p>他说，大二的某个夜晚，他心里很郁闷，夜里出来走走，不觉间走到我的学校。明明想叫我出来，却又害怕突然的打扰，最后只是随便寒暄了几句。</p><p>他说，大学怂了四年，终于迈出一步，以看花为借口靠近我，然后约我看电影，然后尝试着牵手，在被拒绝之后心情很低落。但还是鼓起勇气试了许多次。</p><p>他还说，去年看到我说要去北京，他就疯狂联系北京的学校，只是因为种种原因未成行。</p><p>“从我的学校到你的学校这一步，我走了四年。很庆幸，终于走到了。”</p><h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><p>他听着李宗盛的《鬼迷心窍》，一步一步向我走来。后知后觉的我，庆幸着自己是这个十年故事的女主角。最近听JJ的新歌，感觉有一句歌词很适合总结这篇文章：“这故事开始一个人，我认真写成了我们”。</p><p>谢谢你的等待，谢谢你的认真。未来有你，于我幸甚。</p><p>​      </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1&quot;&gt;&lt;a href=&quot;#1&quot; class=&quot;headerlink&quot; title=&quot;1&quot;&gt;&lt;/a&gt;1&lt;/h3&gt;&lt;p&gt;他突然说要来看樱花的时候，我真的以为他是来看花的。 &lt;/p&gt;
&lt;p&gt;虽然在同一座城市，但是我们的联系实在少的可怜。我时常忘记，在这个离家近一千公里的
      
    
    </summary>
    
    
    
      <category term="personal stuff" scheme="http://yoursite.com/tags/personal-stuff/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/09/27/hello-world/"/>
    <id>http://yoursite.com/2019/09/27/hello-world/</id>
    <published>2019-09-27T02:43:08.000Z</published>
    <updated>2019-09-27T02:43:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
